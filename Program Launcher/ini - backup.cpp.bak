//
//  _       _                   
// (_)_ __ (_)  ___ _ __  _ __  
// | | '_ \| | / __| '_ \| '_ \ 
// | | | | | || (__| |_) | |_) |
// |_|_| |_|_(_)___| .__/| .__/ 
//                 |_|   |_|    
//
// This file contains functions to read and write to ini file
// 
// Functions included in this file:
// 
//		INT GetSettingString(LPCTSTR Section, LPCTSTR Key, LPTSTR pszBuffer, DWORD nSize, LPCTSTR lpDefault);
//		
//		INT SetSettingString(LPCTSTR Section, LPCTSTR Key, LPCTSTR lpString);
//		
//		UINT GetSettingInt(LPCTSTR Section, LPCTSTR Key, INT nDefault);
//		
//		INT SetSettingInt(LPCTSTR Section, LPCTSTR Key, INT nNumber);
//		
//		INT GetSettingButtonStruct(LPCTSTR lpszCategoryName, INT nButtonIndex, LaunchButton* lpStruct, UINT uSizeStruct, BOOL bRequestAbsolute);
//		
//		INT SetSettingButtonStruct(LPCTSTR lpszCategoryName, INT nButtonIndex, LaunchButton* lpStruct, UINT uSizeStruct);
//		
//		INT DeleteSettingKey(LPCTSTR lpszSection, LPCTSTR lpszKeyName);
//		
//		INT CreateIniFile();
// 
//  Copyright ©2021, barty12
//

#include "framework.h"
#include "Program Launcher.h"

//
//  FUNCTION:	GetSettingString(LPCTSTR lpszSectionName, LPCTSTR lpszKeyName, LPTSTR lpszBuffer, DWORD nSize, LPCTSTR lpszDefault)
//
//  PURPOSE: Reads string from INI_FILE_NAME (ProgramLauncher.ini)
// 
//  RETURN: The return value is the number of characters copied to the buffer, not including the terminating null character.
//	If neither lpAppName nor lpKeyName is NULL and the supplied destination buffer is too small to hold the requested string, the string is truncatedand followed by a null character, and the return value is equal to nSize minus one.
//	If either lpAppName or lpKeyName is NULL and the supplied destination buffer is too small to hold all the strings, the last string is truncatedand followed by two null characters.In this case, the return value is equal to nSize minus two.
//
INT GetSettingString(LPCTSTR lpszSectionName, LPCTSTR lpszKeyName, LPTSTR lpszBuffer, DWORD nSize, LPCTSTR lpszDefault){

	return (INT)GetPrivateProfileString(lpszSectionName, lpszKeyName, lpszDefault, lpszBuffer, nSize, szIniPath);
}

//
//  FUNCTION: SetSettingString(LPCTSTR lpszSectionName, LPCTSTR lpszKeyName, LPCTSTR lpszString)
//
//  PURPOSE: Writes string to INI_FILE_NAME (ProgramLauncher.ini)
// 
//  RETURN: 1 if success, 0 if fail
//
INT SetSettingString(LPCTSTR lpszSectionName, LPCTSTR lpszKeyName, LPCTSTR lpszString){

	if(lpszString == NULL){
		return 0;
	}

	CreateIniFile();

	return WritePrivateProfileString(lpszSectionName, lpszKeyName, lpszString, szIniPath);
}

//
//  FUNCTION: GetSettingInt(LPCTSTR lpszSectionName, LPCTSTR lpszKeyName, INT nDefault)
//
//  PURPOSE: Reads number from INI_FILE_NAME (ProgramLauncher.ini)
// 
//  RETURN: number from the specified key. If the key is not found, the return value is the specified default value.
//
UINT GetSettingInt(LPCTSTR lpszSectionName, LPCTSTR lpszKeyName, INT nDefault){

	return GetPrivateProfileInt(lpszSectionName, lpszKeyName, nDefault, szIniPath);
}

//
//  FUNCTION:  SetSettingInt(LPCTSTR lpszSectionName, LPCTSTR lpszKeyName, INT nNumber)
//
//  PURPOSE: Writes int to INI_FILE_NAME (ProgramLauncher.ini)
// 
//  RETURN: 1 if success, 0 if fail
//
INT SetSettingInt(LPCTSTR lpszSectionName, LPCTSTR lpszKeyName, INT nNumber){

	TCHAR szNumber[INT_LEN_IN_DIGITS];

	_itot_s(nNumber, szNumber, INT_LEN_IN_DIGITS, 10);

	CreateIniFile();

	return WritePrivateProfileString(lpszSectionName, lpszKeyName, szNumber, szIniPath);
}

//
//  FUNCTION: GetSettingStruct(LPCTSTR Section, LPCTSTR Key, LPVOID lpStruct, UINT uSizeStruct)
//
//  PURPOSE: Reads LaunchButton struct from INI_FILE_NAME (ProgramLauncher.ini)
// 
//  RETURN: 1 if success, 0 if fail
//
INT GetSettingButtonStruct(LPCTSTR lpszCategoryName, INT nButtonIndex, LaunchButton* lpStruct, UINT uSizeStruct, BOOL bRequestAbsolute){

	TCHAR szKeyNameBuffer[MAX_PATH + 5];

	//path
	_stprintf_s(szKeyNameBuffer, MAX_PATH + 5, TEXT("%i.%s"), nButtonIndex, TEXT("Path"));
	if(!GetSettingString(lpszCategoryName, szKeyNameBuffer, lpStruct->szPath, MAX_PATH, TEXT(""))){
		lpStruct->szPath[0] = 0;
	}

	//64-bit path
	_stprintf_s(szKeyNameBuffer, MAX_PATH + 5, TEXT("%i.%s"), nButtonIndex, TEXT("Path64"));
	if(!GetSettingString(lpszCategoryName, szKeyNameBuffer, lpStruct->szPath64, MAX_PATH, TEXT(""))){
		lpStruct->szPath64[0] = 0;
	}

	//icon path
	_stprintf_s(szKeyNameBuffer, MAX_PATH + 5, TEXT("%i.%s"), nButtonIndex, TEXT("PathIcon"));
	if(!GetSettingString(lpszCategoryName, szKeyNameBuffer, lpStruct->szPathIcon, MAX_PATH, TEXT(""))){
		lpStruct->szPathIcon[0] = 0;
	}

	//icon index
	_stprintf_s(szKeyNameBuffer, MAX_PATH + 5, TEXT("%i.%s"), nButtonIndex, TEXT("IconIndex"));
	lpStruct->nIconIndex = GetSettingInt(lpszCategoryName, szKeyNameBuffer, 0);

	//name
	_stprintf_s(szKeyNameBuffer, MAX_PATH + 5, TEXT("%i.%s"), nButtonIndex, TEXT("Name"));
	if(!GetSettingString(lpszCategoryName, szKeyNameBuffer, lpStruct->szName, MAX_PATH, TEXT(""))){
		lpStruct->szName[0] = 0;
	}

	//admin
	_stprintf_s(szKeyNameBuffer, MAX_PATH + 5, TEXT("%i.%s"), nButtonIndex, TEXT("Admin"));
	lpStruct->bAdmin = GetSettingInt(lpszCategoryName, szKeyNameBuffer, 0);

	//absolute paths
	_stprintf_s(szKeyNameBuffer, MAX_PATH + 5, TEXT("%i.%s"), nButtonIndex, TEXT("AbsolutePaths"));
	lpStruct->bAbsolute = GetSettingInt(lpszCategoryName, szKeyNameBuffer, 0);

	if(!lpStruct->bAbsolute && bRequestAbsolute){
		AddLetterToPath(lpStruct->szPath);
		AddLetterToPath(lpStruct->szPath64);
		AddLetterToPath(lpStruct->szPathIcon);
	}

	return 1;
}

//
//  FUNCTION: SetSettingButtonStruct(LPCTSTR lpszCategoryName, INT nButtonIndex, LaunchButton* lpStruct, UINT uSizeStruct)
//
//  PURPOSE: Writes LaunchButton struct to INI_FILE_NAME (ProgramLauncher.ini)
// 
//  RETURN: 1 if success, 0 if fail
//
INT SetSettingButtonStruct(LPCTSTR lpszCategoryName, INT nButtonIndex, LaunchButton* lpStruct, UINT uSizeStruct){

	TCHAR szKeyNameBuffer[MAX_PATH + 5];

	if(lpStruct == NULL){
		//path
		_stprintf_s(szKeyNameBuffer, MAX_PATH + 5, TEXT("%i.%s"), nButtonIndex, TEXT("Path"));
		DeleteSettingKey(lpszCategoryName, szKeyNameBuffer);

		//64-bit path
		_stprintf_s(szKeyNameBuffer, MAX_PATH + 5, TEXT("%i.%s"), nButtonIndex, TEXT("Path64"));
		DeleteSettingKey(lpszCategoryName, szKeyNameBuffer);

		//icon path
		_stprintf_s(szKeyNameBuffer, MAX_PATH + 5, TEXT("%i.%s"), nButtonIndex, TEXT("PathIcon"));
		DeleteSettingKey(lpszCategoryName, szKeyNameBuffer);

		//icon index
		_stprintf_s(szKeyNameBuffer, MAX_PATH + 5, TEXT("%i.%s"), nButtonIndex, TEXT("IconIndex"));
		DeleteSettingKey(lpszCategoryName, szKeyNameBuffer);

		//name
		_stprintf_s(szKeyNameBuffer, MAX_PATH + 5, TEXT("%i.%s"), nButtonIndex, TEXT("Name"));
		DeleteSettingKey(lpszCategoryName, szKeyNameBuffer);

		//admin
		_stprintf_s(szKeyNameBuffer, MAX_PATH + 5, TEXT("%i.%s"), nButtonIndex, TEXT("Admin"));
		DeleteSettingKey(lpszCategoryName, szKeyNameBuffer);

		//absolute paths
		_stprintf_s(szKeyNameBuffer, MAX_PATH + 5, TEXT("%i.%s"), nButtonIndex, TEXT("AbsolutePaths"));
		DeleteSettingKey(lpszCategoryName, szKeyNameBuffer);
		return 1;
	}
	else{
		if(!lpStruct->bAbsolute){
			RemoveLetterFromPath(lpStruct->szPath);
			RemoveLetterFromPath(lpStruct->szPath64);
			RemoveLetterFromPath(lpStruct->szPathIcon);
		}
		//path
		_stprintf_s(szKeyNameBuffer, MAX_PATH + 5, TEXT("%i.%s"), nButtonIndex, TEXT("Path"));
		SetSettingString(lpszCategoryName, szKeyNameBuffer, lpStruct->szPath);

		//64-bit path
		_stprintf_s(szKeyNameBuffer, MAX_PATH + 5, TEXT("%i.%s"), nButtonIndex, TEXT("Path64"));
		SetSettingString(lpszCategoryName, szKeyNameBuffer, lpStruct->szPath64);

		//icon path
		_stprintf_s(szKeyNameBuffer, MAX_PATH + 5, TEXT("%i.%s"), nButtonIndex, TEXT("PathIcon"));
		SetSettingString(lpszCategoryName, szKeyNameBuffer, lpStruct->szPathIcon);

		//icon index
		_stprintf_s(szKeyNameBuffer, MAX_PATH + 5, TEXT("%i.%s"), nButtonIndex, TEXT("IconIndex"));
		SetSettingInt(lpszCategoryName, szKeyNameBuffer, lpStruct->nIconIndex);

		//name
		_stprintf_s(szKeyNameBuffer, MAX_PATH + 5, TEXT("%i.%s"), nButtonIndex, TEXT("Name"));
		SetSettingString(lpszCategoryName, szKeyNameBuffer, lpStruct->szName);

		//admin
		_stprintf_s(szKeyNameBuffer, MAX_PATH + 5, TEXT("%i.%s"), nButtonIndex, TEXT("Admin"));
		SetSettingInt(lpszCategoryName, szKeyNameBuffer, lpStruct->bAdmin);

		//absolute paths
		_stprintf_s(szKeyNameBuffer, MAX_PATH + 5, TEXT("%i.%s"), nButtonIndex, TEXT("AbsolutePaths"));
		SetSettingInt(lpszCategoryName, szKeyNameBuffer, lpStruct->bAbsolute);
	}
	return 1;
}

//
//  FUNCTION: DeleteSettingKey(LPCTSTR lpszSection, LPCTSTR lpszKeyName)
//
//  PURPOSE: Deletes specified key from INI_FILE_NAME (ProgramLauncher.ini)
// 
//  RETURN: 1 if success, 0 if fail
//
INT DeleteSettingKey(LPCTSTR lpszSection, LPCTSTR lpszKeyName){

	return WritePrivateProfileString(lpszSection, lpszKeyName, NULL, szIniPath);
}


//
//  FUNCTION: CreateIniFile()
//
//  PURPOSE: Creates new ini file with name: INI_FILE_NAME (ProgramLauncher.ini)
// 
//  RETURN: 1 if success, 0 if fail
//
INT CreateIniFile(){

	//check if the file exists
	DWORD dwAttrib = GetFileAttributes(szIniPath);

	//if it doesn't exist create new one
	if(dwAttrib == INVALID_FILE_ATTRIBUTES && (dwAttrib & FILE_ATTRIBUTE_DIRECTORY)){

		//general
		WritePrivateProfileString(TEXT("general"), TEXT("ShowAppNames"), TEXT(TOSTRING(DEFAULT_SHOWAPPNAMES)), szIniPath);
		WritePrivateProfileString(TEXT("general"), TEXT("CloseAfterLaunch"), TEXT(TOSTRING(DEFAULT_CLOSEAFTERLAUNCH)), szIniPath);
		WritePrivateProfileString(TEXT("general"), TEXT("UseIconCaching"), TEXT(TOSTRING(DEFAULT_USEICONCACHING)), szIniPath);
		//WritePrivateProfileString(TEXT("general"), TEXT("LaunchWhenConnected"), TEXT("0"), iniPath);
		WritePrivateProfileString(TEXT("general"), TEXT("Language"), TEXT("English"), szIniPath);
		WritePrivateProfileString(TEXT("general"), TEXT("WindowWidth"), TEXT(TOSTRING(DEFAULT_WINDOW_WIDTH)), szIniPath);
		WritePrivateProfileString(TEXT("general"), TEXT("WindowHeight"), TEXT(TOSTRING(DEFAULT_WINDOW_HEIGHT)), szIniPath);

		//appereance
		WritePrivateProfileString(TEXT("appereance"), TEXT("IconSize"), TEXT(TOSTRING(DEFAULT_ICON_SIZE)), szIniPath);
		WritePrivateProfileString(TEXT("appereance"), TEXT("IconSpacingHorizontal"), TEXT(TOSTRING(DEFAULT_HORZ_SPACING)), szIniPath);
		WritePrivateProfileString(TEXT("appereance"), TEXT("IconSpacingVertical"), TEXT(TOSTRING(DEFAULT_VERT_SPACING)), szIniPath);

	}
	return 1;
}